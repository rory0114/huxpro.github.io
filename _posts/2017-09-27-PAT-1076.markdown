---
layout:     post
title:      "PAT1076"
subtitle:   "用DFS解决A1076"
date:       2017-09-27 10:00:00
author:     "李彦瑞"
header-img: "img/post-pat.jpg"
catalog: true
tags:
    - PAT
---

> “PAT1076 ”


## 题目分析
题目名称“Forwards on Weibo”

算法笔记上推荐使用BFS来做，但我不死心试了试使用DFS。
<p id = "build"></p>
---

## 程序

<pre><code>
#include< stdio.h>
#include< iostream>
#include< vector>
#include< algorithm>
using namespace std;
const int maxn=1005;
vector< int> node[maxn];
int m,n,q,root;
int vis[maxn];
int cnt;
int hh[maxn];//记录某个点现在是第几次传播
void DFS(int r,int h)
{
  
  if(vis[r]==0)//如果访问过证明此时是出现了到这个点的现在路径比之前的路径短，不用重复计数
  {
    cnt++;
    vis[r]=1;
  }
  int numm=node[r].size();
  for(int i=0;i<numm;i++)
  {
    if((vis[node[r][i]]!=1||hh[node[r][i]>h+1])&&h+1<=m)//当没被访问或者传播级数更小并且小于规定传播级数时进行遍历
    DFS(node[r][i],h+1);
  }
  return;
}
int main()
{

  int num,t;
  scanf("%d%d",&n,&m);
  for(int i=1;i<=n;i++)
  {
    scanf("%d",&num);
    for(int j=0;j<num;j++)
    {
      scanf("%d",&t);
      node[t].push_back(i);
    }
  }
  scanf("%d",&q);
  for(int i=0;i<q;i++)
  {
    fill(vis,vis+maxn,0);
    fill(hh,hh+maxn,m+1);
    scanf("%d",&root);
    cnt=0;
    DFS(root,0);
    printf("%d\n",cnt-1);
  }

  return 0;
}
</pre></code>


## 分析
使用DFS时要注意一种情况：当用户X在第i次访问时已经达到了上限无法继续遍历，但可能这个点通过其他路径访问时并没有达到上限，因此不能简单地在某一点达到上限时就给它定义为不用访问。<br/>
所以使用了数组hh记录之前这个点是通过几次传播到达的，判断如果现在的路径比之前的短就进行DFS，同时如果是这种情况下，不重复计数。

基本可以完成，但就如算法笔记预测的，最后一组数据超时了，也不知道怎么改，有人知道教一下我@-@
——  记于 2017.9.27


